//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputController/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""Debugger"",
            ""id"": ""cd4ee06d-1744-4e6a-b62a-38d0d9b63f16"",
            ""actions"": [
                {
                    ""name"": ""ToggleDebug"",
                    ""type"": ""Button"",
                    ""id"": ""eaf7eb7e-232a-4cd2-a684-984913f6b1ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Return"",
                    ""type"": ""Button"",
                    ""id"": ""a4ff3657-7d8a-48f7-b1c0-9dac852d95dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""323a75c3-c0ed-45a9-baad-fb657c95f527"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleDebug"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1372b124-38db-43c0-918c-6aadb0cb36dd"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Debugger
        m_Debugger = asset.FindActionMap("Debugger", throwIfNotFound: true);
        m_Debugger_ToggleDebug = m_Debugger.FindAction("ToggleDebug", throwIfNotFound: true);
        m_Debugger_Return = m_Debugger.FindAction("Return", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Debugger
    private readonly InputActionMap m_Debugger;
    private List<IDebuggerActions> m_DebuggerActionsCallbackInterfaces = new List<IDebuggerActions>();
    private readonly InputAction m_Debugger_ToggleDebug;
    private readonly InputAction m_Debugger_Return;
    public struct DebuggerActions
    {
        private @InputController m_Wrapper;
        public DebuggerActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleDebug => m_Wrapper.m_Debugger_ToggleDebug;
        public InputAction @Return => m_Wrapper.m_Debugger_Return;
        public InputActionMap Get() { return m_Wrapper.m_Debugger; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebuggerActions set) { return set.Get(); }
        public void AddCallbacks(IDebuggerActions instance)
        {
            if (instance == null || m_Wrapper.m_DebuggerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebuggerActionsCallbackInterfaces.Add(instance);
            @ToggleDebug.started += instance.OnToggleDebug;
            @ToggleDebug.performed += instance.OnToggleDebug;
            @ToggleDebug.canceled += instance.OnToggleDebug;
            @Return.started += instance.OnReturn;
            @Return.performed += instance.OnReturn;
            @Return.canceled += instance.OnReturn;
        }

        private void UnregisterCallbacks(IDebuggerActions instance)
        {
            @ToggleDebug.started -= instance.OnToggleDebug;
            @ToggleDebug.performed -= instance.OnToggleDebug;
            @ToggleDebug.canceled -= instance.OnToggleDebug;
            @Return.started -= instance.OnReturn;
            @Return.performed -= instance.OnReturn;
            @Return.canceled -= instance.OnReturn;
        }

        public void RemoveCallbacks(IDebuggerActions instance)
        {
            if (m_Wrapper.m_DebuggerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebuggerActions instance)
        {
            foreach (var item in m_Wrapper.m_DebuggerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebuggerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebuggerActions @Debugger => new DebuggerActions(this);
    public interface IDebuggerActions
    {
        void OnToggleDebug(InputAction.CallbackContext context);
        void OnReturn(InputAction.CallbackContext context);
    }
}
